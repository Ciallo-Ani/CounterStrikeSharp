name: Build

on:
  push:
    paths-ignore:
      - 'docs/**'
    branches: [ "win_test" ]
  
env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Prepare env
        shell: bash
        run: echo "GITHUB_SHA_SHORT=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Find Visual C++ compilers and make all environment variables global (W)
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          :: See https://github.com/microsoft/vswhere/wiki/Find-VC
          for /f "usebackq delims=*" %%i in (`vswhere -latest -property installationPath`) do (
            call "%%i"\Common7\Tools\vsdevcmd.bat -arch=x64 -host_arch=x64
          )

          :: Loop over all environment variables and make them global.
          for /f "delims== tokens=1,2" %%a in ('set') do (
            echo>>"%GITHUB_ENV%" %%a=%%b
          )

      - uses: actions/checkout@v3
        with:
          submodules: 'recursive'

      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - run: dotnet publish -c Release managed/CounterStrikeSharp.API

      - name: Install Protoc
        uses: arduino/setup-protoc@v2

      - name: Build dyncall
        run: |
          cd ${{github.workspace}}/libraries/dyncall
          cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Build funchook
        run: |
          cd ${{github.workspace}}/libraries/funchook
          cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Build jsoncpp
        run: |
          cd ${{github.workspace}}/libraries/jsoncpp
          cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Build Main Dll
        run: |
          cd ${{github.workspace}}
          cmake -B build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          cmake --build build --config ${{env.BUILD_TYPE}}

      - name: Clean build directory
        run: |
          mkdir -p build/addons/counterstrikesharp/bin
          mv build/${{env.BUILD_TYPE}}/*.dll build/addons/counterstrikesharp/bin
          mkdir build/output/
          mv build/addons build/output

      - name: Add API to Artifacts
        run: |
          mkdir -p build/output/addons/counterstrikesharp/api
          mkdir -p build/output/addons/counterstrikesharp/plugins
          cp -r managed/CounterStrikeSharp.API/bin/Release/net7.0/publish/* build/output/addons/counterstrikesharp/api

      - uses: actions/upload-artifact@v3
        with:
          name: counterstrikesharp-${{ env.GITHUB_SHA_SHORT }}
          path: build/output/

      - name: Add dotnet runtime
        run: |
          mkdir -p build/output/addons/counterstrikesharp/dotnet
          curl -s -L https://download.visualstudio.microsoft.com/download/pr/a99861c8-2e00-4587-aaef-60366ca77307/a44ceec2c5d34165ae881600f52edc43/aspnetcore-runtime-7.0.11-win-x64.zip -o dotnet.zip
          Expand-Archive -Path dotnet.zip -DestinationPath build/output/addons/counterstrikesharp/dotnet

      - uses: actions/upload-artifact@v3
        with:
          name: counterstrikesharp-with-runtime-${{ env.GITHUB_SHA_SHORT }}
          path: build/output/
